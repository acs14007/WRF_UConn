library(raster)
library(sf)
library(sp)
library(doParallel)
library(foreach)
library(bigstatsr)
source("makeShape.R")
rad2deg<-function(rad){ rad*180/pi}
deg2rad<-function(deg){ deg/180*pi}
cell_width<-500
wfolder<-"/archivio/shared/geodati/vettoriali/vaia/Cerrai_WRF_grid/"
myproj<-"+proj=lcc +lat_1=45.827  +lat_2=45.827  +lat_0=45.827 +lon_0=11.625 +x_0=4000000 +y_0=2800000 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs"
## read CATEGORIE -----
#categ.for<-st_read("/archivio/shared/geodati/vettoriali/WRF_UConn/catValidated_LCCcustom.shp")
#categ.for.myproj <- categ.for %>% st_transform(myproj)
#st_write(categ.for.myproj, "/archivio/shared/geodati/vettoriali/WRF_UConn/catValidated_LCCcustom.shp")
## FROM NODES TO RECT TILES -----
#nodes <- readRDS("nodes.RDS")
#nodes.myproj <-  nodes  %>% st_set_crs(4326)   %>% st_transform(myproj)
#
# nodes.sp <-  as.data.frame(st_coordinates( nodes))
# names(nodes.sp)<-c("x", "y")
# coordinates(nodes.sp) <-  ~x+y
# crs(nodes.sp)<-CRS("+init=epsg:4326")
# saveRDS(nodes.sp, "nodes.sp")
#nodes.sp<-readRDS("nodes.sp")
#square.size<-500
#points<-as.data.frame( st_coordinates(nodes.myproj))
#degr<-1.2065
#squares<-processPoints(points , 500  )
#crs(squares)<-CRS(myproj)
#shapefile(squares, sprintf("out/nodes.square.projected.shp") , overwrite=T)
squares<-st_read( sprintf("out/nodes.square.projected.shp") )
## read CATEGORIE -----
categ.for<-st_read("/archivio/shared/geodati/vettoriali/WRF_UConn/catValidated_LCCcustom.shp")
### find squares overlapping
intersects.sparse<-st_intersects(squares, categ.for.myproj )
## read CATEGORIE -----
categ.for.myproj<-st_read("/archivio/shared/geodati/vettoriali/WRF_UConn/catValidated_LCCcustom.shp")
### find squares overlapping
intersects.sparse<-st_intersects(squares, categ.for.myproj )
pts = st_sfc(st_point(c(.5,.5)), st_point(c(1.5, 1.5)), st_point(c(2.5, 2.5)))
pol = st_polygon(list(rbind(c(0,0), c(2,0), c(2,2), c(0,2), c(0,0))))
lst = st_intersects(pts, pol)
lst
lst@ncol
ncol(lst)
region.id(lst)
lst$ncol
attr(lst)
attr(lst, "ncol")
which( lst)
which( lst==0)
which( lst!=0)
which( !lst)
lengths(lst) > 0
ints<-which (lengths(intersects.sparse) > 0 )
?lengths
i<-ints[[2]]
intersects.sparse[[i]]
squares[[i]]
squares[i]
squares[i,]
cl <- parallel::makeForkCluster(6)
doParallel::registerDoParallel(cl)
cut.Polygons.In.Squares <- function(intersects.sparse, squares, ints) {
foreach(i=ints,
.packages = c("sf")  )  %dopar% {
st_intersection(squares[i,],
categ.for.myproj[intersects.sparse[[i]], ] )
}
}
cut.Polygons.In.Squares(intersects)
cut.Polygons.In.Squares(intersects.sparse, squares, ints)
sf_extSoftVersion()["lwgeom"]
sf_extSoftVersion()["lwgeom"]
sf::st_make_valid()
?sf::st_make_valid
x = st_sfc(st_polygon(list(rbind(c(0,0),c(0.5,0),c(0.5,0.5),c(0.5,0),c(1,0),c(1,1),c(0,1),c(0,0)))))
suppressWarnings(st_is_valid(x))
y = st_make_valid(x)
st_is_valid(y)
library(lwgeom)
library(raster)
library(sf)
library(sp)
library(doParallel)
library(foreach)
library(bigstatsr)
library(lwgeom)
