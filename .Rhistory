#shapefile(squares, sprintf("out/nodes.square.projected.shp") , overwrite=T)
squares<-st_read( sprintf("out/nodes.square.projected.shp") )
### find squares overlapping
squares.intersecting.polys<-st_intersects(squares, categ.for.myproj )
squares.intersecting.polys.ids<-which (lengths(squares.intersecting.polys) > 0 )
cl <- parallel::makeForkCluster(10)
doParallel::registerDoParallel(cl)
cut.Polygons.In.Squares <-
function(squares.intersecting.polys,
squares, categ.for.myproj,
squares.intersecting.polys.ids) {
foreach(i = squares.intersecting.polys.ids,
.packages = c("sf", "lwgeom"))  %dopar% {
geomes <- st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<-st_intersection(squares[i, ], geomes)
area<-ifelse(length(inters)>0, sum(st_area(inters)), 0)
areas<-ifelse(length(inters)>0, as.numeric(st_area(inters)), 0)
inters[["tot_area"]]<-area
inters[["cover"]]<- area/as.numeric(st_area(squares[i, ]))
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
inters[["mainCategory"]]<-as.character(aa$category[[which.max(aa$x)]])
inters[["mainCategory_cover"]]<-max(aa$x)/as.numeric(st_area(squares[i, ]))
}
}
cut.Polygons.In.Squares.output <- cut.Polygons.In.Squares(squares.intersecting.polys,
squares, categ.for.myproj,
squares.intersecting.polys.ids)
area
inters
parallel::stopCluster(cl)
cl <- parallel::makeForkCluster(2)
doParallel::registerDoParallel(cl)
cut.Polygons.In.Squares <-
function(squares.intersecting.polys,
squares, categ.for.myproj,
squares.intersecting.polys.ids) {
foreach(i = squares.intersecting.polys.ids,
.packages = c("sf", "lwgeom"))  %dopar% {
geomes <- st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<-st_intersection(squares[i, ], geomes)
area<-ifelse(length(inters)>0, sum(st_area(inters)), 0)
areas<-ifelse(length(inters)>0, as.numeric(st_area(inters)), 0)
inters[["tot_area"]]<-area
inters[["cover"]]<- area/as.numeric(st_area(squares[i, ]))
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
inters[["mainCategory"]]<-as.character(aa$category[[which.max(aa$x)]])
inters[["mainCategory_cover"]]<-max(aa$x)/as.numeric(st_area(squares[i, ]))
}
}
cut.Polygons.In.Squares <-
function(squares.intersecting.polys,
categ.for.myproj,
squares.intersecting.polys.ids) {
foreach(i = squares.intersecting.polys.ids,
.packages = c("sf", "lwgeom"))  %dopar% {
geomes <- st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<-st_intersection(squares[i, ], geomes)
area<-ifelse(length(inters)>0, sum(st_area(inters)), 0)
areas<-ifelse(length(inters)>0, as.numeric(st_area(inters)), 0)
inters[["tot_area"]]<-area
inters[["cover"]]<- area/as.numeric(st_area(squares.intersecting.polys[i, ]))
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
inters[["mainCategory"]]<-as.character(aa$category[[which.max(aa$x)]])
inters[["mainCategory_cover"]]<-max(aa$x)/as.numeric(st_area(squares[i, ]))
}
}
cut.Polygons.In.Squares.output <- cut.Polygons.In.Squares(squares.intersecting.polys[1:12],
categ.for.myproj,
squares.intersecting.polys.ids[1:12])
parallel::stopCluster(cl)
debugSource('/archivio/R/shared/WRF_UConn/processing.R')
debugSource('/archivio/R/shared/WRF_UConn/processing.R')
debugSource('/archivio/R/shared/WRF_UConn/processing.R')
cut.Polygons.In.Squares <-
function(squares.intersecting.polys,
categ.for.myproj,
squares.intersecting.polys.ids) {
foreach(i = squares.intersecting.polys.ids,
.packages = c("sf", "lwgeom"))  %dopar% {
geomes <- st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<-st_intersection(squares[i, ], geomes)
area<-ifelse(length(inters)>0, sum(st_area(inters)), 0)
areas<-ifelse(length(inters)>0, as.numeric(st_area(inters)), 0)
inters[["tot_area"]]<-area
inters[["cover"]]<- area/as.numeric(st_area(squares.intersecting.polys[i, ]))
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
inters[["mainCategory"]]<-as.character(aa$category[[which.max(aa$x)]])
inters[["mainCategory_cover"]]<-max(aa$x)/as.numeric(st_area(squares[i, ]))
}
}
cut.Polygons.In.Squares.output <- cut.Polygons.In.Squares(squares.intersecting.polys[1:12],
categ.for.myproj,
squares.intersecting.polys.ids[1:12])
cut.Polygons.In.Squares <-
function(squares.intersecting.polys,
categ.for.myproj,
squares.intersecting.polys.ids) {
foreach(i = squares.intersecting.polys.ids,
.packages = c("sf", "lwgeom"))  %do% {
geomes <- st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<-st_intersection(squares[i, ], geomes)
area<-ifelse(length(inters)>0, sum(st_area(inters)), 0)
areas<-ifelse(length(inters)>0, as.numeric(st_area(inters)), 0)
inters[["tot_area"]]<-area
inters[["cover"]]<- area/as.numeric(st_area(squares.intersecting.polys[i, ]))
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
inters[["mainCategory"]]<-as.character(aa$category[[which.max(aa$x)]])
inters[["mainCategory_cover"]]<-max(aa$x)/as.numeric(st_area(squares[i, ]))
}
}
cut.Polygons.In.Squares.output <- cut.Polygons.In.Squares(squares.intersecting.polys[1:12],
categ.for.myproj,
squares.intersecting.polys.ids[1:12])
debugSource('/archivio/R/shared/WRF_UConn/processing.R')
geomes <- st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
debugSource('/archivio/R/shared/WRF_UConn/processing.R')
i
debugSource('/archivio/R/shared/WRF_UConn/processing.R')
geomes <- st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<-st_intersection(squares[i, ], geomes)
inters<-st_intersection(squares.intersecting.polys[i, ], geomes)
debugSource('/archivio/R/shared/WRF_UConn/processing.R')
geomes <- st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<-st_intersection(squares.intersecting.polys[i, ], geomes)
debugSource('/archivio/R/shared/WRF_UConn/processing.R')
geomes <- st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
squares.intersecting.polys[i, ]
inters<-st_intersection(squares.intersecting.polys[[i]], geomes)
inters<-st_intersection(squares.intersecting.polys[[i]], geomes)
squares.intersecting.polys[[i]]
squares.intersecting.polys.ids[[i]]
i
squares.intersecting.polys[[i]]
squares[i,]
debugSource('/archivio/R/shared/WRF_UConn/processing.R')
geomes <- st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<-st_intersection(squares[i,], geomes)
area<-ifelse(length(inters)>0, sum(st_area(inters)), 0)
areas<-ifelse(length(inters)>0, as.numeric(st_area(inters)), 0)
inters[["tot_area"]]<-area
inters[["cover"]]<- area/as.numeric(st_area(squares[i,]))
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
areas
inters$categoria
as.numeric(st_area(inters))
areas
area
areas
areas<-ifelse(length(inters)>0, as.numeric(st_area(inters)), 0)
areas
length(inters)
as.numeric(st_area(inters))
inters<-st_intersection(squares[i,], geomes)
area<-ifelse(length(inters)>0, sum(st_area(inters)), 0)
areas<-0
if(length(inters)>0) areas<- as.numeric(st_area(inters))
inters[["tot_area"]]<-area
inters[["cover"]]<- area/as.numeric(st_area(squares[i,]))
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
areas
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
inters[["mainCategory"]]<-as.character(aa$category[[which.max(aa$x)]])
inters[["mainCategory_cover"]]<-max(aa$x)/as.numeric(st_area(squares[i, ]))
debugSource('/archivio/R/shared/WRF_UConn/processing.R')
source('/archivio/R/shared/WRF_UConn/processing.R')
parallel::stopCluster(cl)
cl <- parallel::makeForkCluster(12)
doParallel::registerDoParallel(cl)
cut.Polygons.In.Squares <-
function(squares.intersecting.polys,
categ.for.myproj, squares,
squares.intersecting.polys.ids) {
foreach(i = squares.intersecting.polys.ids,
.packages = c("sf", "lwgeom"))  %dopar% {
geomes <- st_make_valid(categ.for.myproj[squares.intersecting.polys[[i]],])
inters<-st_intersection(squares[i,], geomes)
area<-ifelse(length(inters)>0, sum(st_area(inters)), 0)
areas<-0
if(length(inters)>0) areas<- as.numeric(st_area(inters))
inters[["tot_area"]]<-area
inters[["cover"]]<- area/as.numeric(st_area(squares[i,]))
aa<-aggregate(areas, by=list(category=inters$categoria), FUN=sum)
inters[["mainCategory"]]<-as.character(aa$category[[which.max(aa$x)]])
inters[["mainCategory_cover"]]<-max(aa$x)/as.numeric(st_area(squares[i, ]))
}
}
cut.Polygons.In.Squares.output <- cut.Polygons.In.Squares(squares.intersecting.polys,
categ.for.myproj, squares,
squares.intersecting.polys.ids)
parallel::stopCluster(cl)
saveRDS(cut.Polygons.In.Squares.output, "cut.Polygons.In.Squares.output.rds")
nodes <- readRDS("nodes.RDS")
nodes.myproj <-  nodes  %>% st_set_crs(4326)   %>% st_transform(myproj)
nodes.myproj[[1]]
nodes.myproj[[1]][[1]]
st_bbox(nodes.myproj[[1]][[1]])
st_buffer(st_bbox(nodes.myproj[[1]][[1]]), 500)
st_buffer((nodes.myproj[[1]][[1]]), 500)
st_bbox(st_buffer((nodes.myproj[[1]][[1]]), 500))
st_bbox(st_buffer((nodes.myproj[[1]]), 500))
st_bbox(nodes.myproj[[1]][[1]])
raster::extend( st_bbox(nodes.myproj[[1]][[1]]), 1000)
ST_Expand ( st_bbox(nodes.myproj[[1]][[1]]), 1000)
extend
raster::extend( st_bbox(nodes.myproj[[1]][[1]]), 1000)
st_buffer( st_bbox(nodes.myproj[[1]][[1]]), 1000)
st_buffer( st_bbox(nodes.myproj[[1]][[1]])::geometry, 1000)
st_buffer(nodes.myproj[[1]][[1]], 1000)
st_buffer(nodes.myproj[[1]][[1]], 1000, nQuadSegs = 4)
plot(  st_buffer(nodes.myproj[[1]][[1]], 1000, nQuadSegs = 4))
plot(  st_buffer(nodes.myproj[[1]][[1]], 1000, nQuadSegs = 3))
plot(  st_buffer(nodes.myproj[[1]][[1]], 1000, nQuadSegs = 1))
?st_bbox
plot(  st_buffer(st_bbox(nodes.myproj[[1]][[1]], 1000, nQuadSegs = 1))
)
plot(  st_buffer(st_as_sfc(st_bbox(nodes.myproj[[1]][[1]]), 1000, nQuadSegs = 1)) )
plot(  st_buffer(st_as_sfc(st_bbox(nodes.myproj[[1]][[1]])), 1000 )
)
plot(  st_buffer(st_as_sfc(st_bbox(nodes.myproj[[1]][[1]])), 1000 ))
plot(  st_buffer(st_as_sfc(st_bbox(nodes.myproj[[1]][[1]])), 1000, nQuadSegs = 2 ))
plot(  st_buffer(st_as_sfc(st_bbox(nodes.myproj[[1]][[1]])), 1000, nQuadSegs = 1 ))
plot(  st_buffer((nodes.myproj[[1]][[1]])), 1000, nQuadSegs = 1 ))
plot(  st_buffer((nodes.myproj[[1]][[1]])), 1000, nQuadSegs = 1 )
plot(  st_buffer(nodes.myproj[[1]][[1]], 1000, nQuadSegs = 1 )
)
plot(  st_buffer(nodes.myproj[[1]][[1]], 1000, nQuadSegs = 1 ))
plot(  st_bbox(st_buffer(nodes.myproj[[1]][[1]], 1000, nQuadSegs = 1 ))    )
plot(  st_as_sfc( st_bbox(st_buffer(nodes.myproj[[1]][[1]], 1000, nQuadSegs = 1 ) ) )   )
st_area(  st_as_sfc( st_bbox(st_buffer(nodes.myproj[[1]][[1]], 1000, nQuadSegs = 1 ) ) )   )
st_area(  st_as_sfc( st_bbox(st_buffer(nodes.myproj[[1]][[1]], 1000, nQuadSegs = 1 ) ) )   )
st_area(  st_as_sfc( st_bbox(st_buffer(nodes.myproj[[1]][[1]], 500, nQuadSegs = 1 ) ) )   )
getDoParName()
foreach(i=4:1, .combine='c') %dopar% {
Sys.sleep(3 * i)
i
}
cl <- parallel::makeForkCluster(4)
doParallel::registerDoParallel(cl)
foreach(i=4:1, .combine='c') %dopar% {
Sys.sleep(3 * i)
i
}
foreach(i=4:1, .combine='c', .inorder = F) %dopar% {
Sys.sleep(3 * i)
i
}
foreach(i=4:1, .combine='c', .inorder = F) %dopar% {
Sys.sleep(2 * i)
i
}
parallel::stopCluster(cl)
?st_intersects
squares<-apply(nodes.myproj, 1, f)
#squares<-st_read( sprintf("out/nodes.square.projected.shp") )
#
# ### find squares overlapping
f <- function(x) st_as_sfc( st_bbox(st_buffer(x, 500, nQuadSegs = 1 ) ) )
squares<-apply(nodes.myproj, 1, f)
squares<-apply(nodes.myproj$geometry, 1, f)
debugSource('/archivio/R/shared/WRF_UConn/debug.R')
n
debugSource('/archivio/R/shared/WRF_UConn/debug.R')
debugSource('/archivio/R/shared/WRF_UConn/debug.R')
parallel::stopCluster(cl)
debugSource('/archivio/R/shared/WRF_UConn/debug.R')
debugSource('/archivio/R/shared/WRF_UConn/debug.R')
st_buffer(x, 500, nQuadSegs = 1 )
st_buffer(x$geometry, 500, nQuadSegs = 1 )
#squares<-st_read( sprintf("out/nodes.square.projected.shp") )
#
# ### find squares overlapping
f <- function(x) {
st_as_sfc( st_bbox(
st_buffer(x$geometry, 500, nQuadSegs = 1 )
) )
}
squares<-apply(nodes.myproj, 1,  f)
library(bench)
?bench::mark(
?bench::mark
normal_apply <-bench::mark( squares<-apply(nodes.myproj, 1,  f) )
normal_apply
#degr<-1.2065
#squares<-processPoints(points , 500  )
#crs(squares)<-CRS(myproj)
shapefile(squares, sprintf("out/nodes.square.projected.shp") , overwrite=T)
#degr<-1.2065
#squares<-processPoints(points , 500  )
#crs(squares)<-CRS(myproj)
shapefile(st_as_sfc(squares), sprintf("out/nodes.square.projected.shp") , overwrite=T)
squares[[1]]
#degr<-1.2065
#squares<-processPoints(points , 500  )
#crs(squares)<-CRS(myproj)
shapefile(st_as_sfc(squares), sprintf("out/nodes.square.projected.shp") , overwrite=T)
#degr<-1.2065
#squares<-processPoints(points , 500  )
#crs(squares)<-CRS(myproj)
shapefile(st_as_sf(squares), sprintf("out/nodes.square.projected.shp") , overwrite=T)
?st_as_sf
#degr<-1.2065
#squares<-processPoints(points , 500  )
#crs(squares)<-CRS(myproj)
shapefile(st_as_sf(data.frame(geom=squares)), sprintf("out/nodes.square.projected.shp") , overwrite=T)
squares$`1`
st_as_sf(data.frame(squares[1:12]))
st_as_sf(data.frame(squares[1:120]))
st_as_sf(data.frame(geom=squares[1:120]))
st_as_sf(data.frame(geom=squares[1:12]))
#degr<-1.2065
#squares<-processPoints(points , 500  )
#crs(squares)<-CRS(myproj)
squares.g<-st_as_sf(as.data.frame(squares[1:14]))
squares.g
squares.intersecting.polys
nodes.myproj
as.data.frame(squares[1:14])
data.frame(geometry=squares[1:14])
#degr<-1.2065
#squares<-processPoints(points , 500  )
#crs(squares)<-CRS(myproj)
jj<-data.frame(geometry=squares[1:14])
View(jj)
squares[1:2]
a = st_sf(a = 1:2, geom = st_sfc(st_point(0:1), st_point(1:2)), crs = 4326)
st_sfc(st_point(0:1), st_point(1:2))
#squares<-st_read( sprintf("out/nodes.square.projected.shp") )
#
# ### find squares overlapping
f <- function(x) {
st_bbox(
st_buffer(x$geometry, 500, nQuadSegs = 1 )
)
}
normal_apply <-bench::mark( squares<-apply(nodes.myproj, 1,  f) )
normal_apply
st_as_sf(data.frame(geom=st_sfc(squares)[1:12]))
st_sfc(squares)[1:12])
squares[1:12])
st_sfc(squares[1:12])
squares[[2]][[3]]
#squares<-st_read( sprintf("out/nodes.square.projected.shp") )
#
# ### find squares overlapping
f <- function(x) {
st_sfc( st_bbox(
st_buffer(x$geometry, 500, nQuadSegs = 1 )
)
)
}
normal_apply <-bench::mark( squares<-apply(nodes.myproj, 1,  f) )
#squares<-st_read( sprintf("out/nodes.square.projected.shp") )
#
# ### find squares overlapping
f <- function(x) {
st_as_sfc( st_bbox(
st_buffer(x$geometry, 500, nQuadSegs = 1 )
) )
}
normal_apply <-bench::mark( squares<-apply(nodes.myproj, 1,  f) )
st_as_sf(squares)
st_read(squares)
squares.sf<-st_read(squares)
squares.sf<-st_read(rbind(squares[1:100]))
(rbind(squares[1:100]))
(rbind(geom=squares[1:100]))
(rbind(unlist( squares[1:100])))
(rbind(unlist( squares[1:10])))
squares[[2]]
st_polygon(squares[[2]])
st_polygon(squares)
normal_apply <-bench::mark( squares<- st_as_sfc( st_bbox(nodes.myproj, 500) ) )
normal_apply <-bench::mark( squares<- st_as_sf( st_bbox(nodes.myproj, 500) ) )
normal_apply <-bench::mark( squares<- st_as_sfc( st_buffer(nodes.myproj, 500) ) )
normal_apply <-bench::mark( squares<- st_as_sfc( st_bbox( st_buffer(nodes.myproj, 500) ) ) )
seq_along(nodes.myproj)
seq_along(nodes.myproj[[1]])
normal_apply <-bench::mark( squares<-apply(nodes.myproj[[1]], 1,  f) )
for(i in seq_along(nodes.myproj[[1]]) ){
st_as_sfc( st_bbox( st_buffer(nodes.myproj[i,], 500, nQuadSegs = 1) ) )
if(i>10) break
}
nodes.myproj.squares<-nodes.myproj
nodes.myproj.squares<-nodes.myproj
for(i in seq_along(nodes.myproj[[1]]) ){
nodes.myproj.squares[i,"geometry" ] <-st_as_sfc( st_bbox( st_buffer(nodes.myproj[i,], 500, nQuadSegs = 1) ) )
if(i>10) break
}
class(nodes.myproj[[1]] )
pt1 = st_point(c(0,1))
pt2 = st_point(c(1,1))
(sfc = st_sfc(pt1, pt2))
sfc
#squares<-st_read( sprintf("out/nodes.square.projected.shp") )
#
# ### find squares overlapping
f <- function(x) {
st_polygon( st_bbox(
st_buffer(x$geometry, 500, nQuadSegs = 1 )
) )
}
normal_apply <-bench::mark( squares<-apply(nodes.myproj, 1,  f) )
#squares<-st_read( sprintf("out/nodes.square.projected.shp") )
#
# ### find squares overlapping
f <- function(x) {
st_polygon( st_as_sfc(cst_bbox(
st_buffer(x$geometry, 500, nQuadSegs = 1 )
) ) )
}
normal_apply <-bench::mark( squares<-apply(nodes.myproj, 1,  f) )
debugSource('/archivio/R/shared/WRF_UConn/debug.R')
st_polygon( st_as_sfc(st_bbox(
st_buffer(x$geometry, 500, nQuadSegs = 1 )
) ) )
f <- function(x) {
st_as_sfc(st_bbox(
st_buffer(x$geometry, 500, nQuadSegs = 1 )
) )
}
normal_apply <-bench::mark( squares<-apply(nodes.myproj[1:13,], 1,  f) )
st_polygon(squares)
squares<-apply(nodes.myproj[1:13,], 1,  f)
st_as_sf(squares)
st_read(squares)
st_as_sf( unlist(squares) )
nodes.myproj$geometry[[1]]
class(nodes.myproj$geometry[[1]])
class(nodes.myproj$geometry)
bind_rows_sf
sf::st_as_sf(data.table::rbindlist(squares))
data.table::rbindlist(squares)
st_sfc(squares)
st_union(squares)
g1 <- st_buffer(nodes.myproj2,  500, nQuadSegs = 1)
#squares<-st_read( sprintf("out/nodes.square.projected.shp") )
#
# ### find squares overlapping
nodes.myproj2<-nodes.myproj[1:13]
#squares<-st_read( sprintf("out/nodes.square.projected.shp") )
#
# ### find squares overlapping
nodes.myproj2<-nodes.myproj[1:13,]
g1 <- st_buffer(nodes.myproj2,  500, nQuadSegs = 1)
f <- function(x) st_as_sfc(st_bbox(x))
bbs <- do.call("c", lapply(g1, f))
bbs
plot(ggf)
plot(bbs)
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y))
do.call("c", lapply(x, f))
}
#squares<-st_read( sprintf("out/nodes.square.projected.shp") )
#
# ### find squares overlapping
nodes.myproj2<-nodes.myproj[1:13,]
library(mapview)
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y))
do.call("c", lapply(x, f))
}
mapview(nodes.myproj2) + st_bbox_by_feature(nodes.myproj2)
st_bbox_by_feature(nodes.myproj2)
mapview(nodes.myproj2)
mapview(nodes.myproj2) + st_bbox_by_feature(nodes.myproj2)
squares<-st_bbox_by_feature(nodes.myproj2)
st_crs(squares)
?st_crs
st_crs(squares)<-st_crs(myproj)
mapview(nodes.myproj2) + st_bbox_by_feature(nodes.myproj2)
st_crs(myproj)
mapview(nodes.myproj2) + squares
st_crs(squares)
mapview(nodes.myproj2) + squares
?st_bbox
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y, crs=myproj))
do.call("c", lapply(x, f))
}
squares<-st_bbox_by_feature(nodes.myproj2)
st_crs(squares)<-st_crs(myproj)
mapview(nodes.myproj2) + squares
squares<-st_bbox_by_feature(nodes.myproj2)
st_crs(squares)
?st_as_sfc
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y), crs=myproj)
do.call("c", lapply(x, f))
}
squares<-st_bbox_by_feature(nodes.myproj2)
st_crs(squares)
st_crs(squares)<-st_crs(myproj)
mapview(nodes.myproj2) + squares
st_bbox_by_feature = function(x) {
x = st_geometry(x)
f <- function(y) st_as_sfc(st_bbox(y), crs=myproj)
do.call("c", lapply(x, f))
}
squares<-st_bbox_by_feature(nodes.myproj2)
st_crs(squares)
st_crs(squares)<-myproj
mapview(nodes.myproj2) + squares
st_crs(squares)
squares <- squares  %>% st_set_crs( myproj)
mapview(nodes.myproj2) + squares
library(mapview)
mapview(nodes.myproj2) + squares
